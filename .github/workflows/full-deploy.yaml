name: Full Deployment

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    env:
      TF_VAR_cloud_id: ${{ secrets.cloud_id }}
      TF_VAR_folder_id: ${{ secrets.folder_id }}
      TF_VAR_sa_id: ${{ secrets.sa_id }}
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3  
        
      - name: Decode Service Account Key and save as key.json
        working-directory: terraform
        run: |
          echo "${{ secrets.KEY }}" | base64 -d > key.json
                
      - name: Terraform Init & Apply
        working-directory: terraform
        run: |
          terraform init
          terraform apply -auto-approve

      - name: Extract Static IP
        id: tfip
        working-directory: terraform
        run: |
          ip=$(terraform output -raw ingress_static_ip)
          echo "ip=$ip" >> $GITHUB_OUTPUT
          
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Install Yandex Cloud CLI
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          echo "$HOME/yandex-cloud/bin" >> $GITHUB_PATH
          
      - name: Authenticate with Yandex Cloud
        run: |
          export PATH="$HOME/yandex-cloud/bin:$PATH"
          yc config set service-account-key ${GITHUB_WORKSPACE}/terraform/key.json
                    
      - name: Get cluster name from Terraform output
        id: cluster
        working-directory: terraform
        run: |
          name=$(terraform output -raw cluster_name 2>/dev/null || echo "")
          echo "name=$name" >> $GITHUB_OUTPUT
      
      - name: Get kubeconfig from Yandex Cloud
        run: |
          export PATH="$HOME/yandex-cloud/bin:$PATH"
          yc config profile activate default
          yc config set service-account-key ${GITHUB_WORKSPACE}/terraform/key.json
          yc config set cloud-id "${{ secrets.cloud_id }}"
          yc config set folder-id "${{ secrets.folder_id }}"
          yc managed-kubernetes cluster get-credentials --name "${{ steps.cluster.outputs.name }}" --external
          
      - name: Replace templates with IP
        run: |
          IP="${{ steps.tfip.outputs.ip }}"
          DOMAIN="hipster.${IP//./-}.nip.io"
          echo "Static IP: $IP"
          echo "Domain: $DOMAIN"

          sed "s|<STATIC_IP>|$IP|g" helm/nginx-values.yaml.template > helm/nginx-values.yaml
          sed "s|<NIP_DOMAIN>|$DOMAIN|g" kubernetes-manifests/ingress.yaml.template > kubernetes-manifests/ingress.yaml

      - name: Install Ingress Controller
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
            -n ingress-nginx --create-namespace \
            -f helm/nginx-values.yaml

      - name: Deploy App from original Kubernetes manifest
        run: |
          kubectl create namespace hipster || true
          kubectl apply -n hipster -f https://raw.githubusercontent.com/GoogleCloudPlatform/microservices-demo/main/release/kubernetes-manifests.yaml

      - name: Wait for Ingress Controller to be ready
        run: |
          kubectl rollout status deployment ingress-nginx-controller -n ingress-nginx --timeout=120s

      - name: Apply Ingress
        run: kubectl apply -f kubernetes-manifests/ingress.yaml
        
      - name: Install kube-prometheus-stack 
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm upgrade --install prometheus prometheus-community/kube-prometheus-stack \
            -n monitoring --create-namespace \
            -f helm/prometheus-values.yaml

      - name: Install Loki stack with Promtail 
        run: |
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update
          helm upgrade --install loki grafana/loki-stack \
            -n logging --create-namespace \
            -f helm/loki-values.yaml

      - name: Apply Grafana Ingress 
        run: |
          IP="${{ steps.tfip.outputs.ip }}"
          DOMAIN="grafana.${IP//./-}.nip.io"
          sed "s|<NIP_DOMAIN>|$DOMAIN|g" kubernetes-manifests/grafana-ingress.yaml.template > kubernetes-manifests/grafana-ingress.yaml
          kubectl apply -f kubernetes-manifests/grafana-ingress.yaml
          
      - name: Output application and Grafana URLs
        run: |
          IP="${{ steps.tfip.outputs.ip }}"
          DOMAIN="hipster.${IP//./-}.nip.io"
          echo "Your application is available at: http://${DOMAIN}"
          echo "Grafana is available at: http://grafana.${DOMAIN}"
